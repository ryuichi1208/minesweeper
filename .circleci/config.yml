version: 2.1

commands:
  build_with_cache:
    parameters:
      image_name:
        type: string

      cache_key_prefix:
        type: string
        default: "v1"

    steps:
      - restore_cache:
          keys:
            - << parameters.cache_key_prefix >>-{{ .Branch }}-
            - << parameters.cache_key_prefix >>-
          paths:
            - /caches/image.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/image.tar | true
      - run:
          name: Build Docker image
          command: docker build --cache-from=image -t << parameters.image_name >> .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/image.tar << parameters.image_name >>
      - save_cache:
          key: << parameters.cache_key_prefix >>-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/image.tar
      - run:
          name: Show docker image size
          command: |
            docker images
            ls -l /caches/image.tar
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker
      - build_with_cache:
          image_name: elm
          cache_key_prefix: v1
      - run:
          name: Run tests
          command: docker run -it --rm elm bash -c "elm"
  update_version:
    working_directory: /app
    docker:
      - image: alpine
    steps:
      - run:
          name: Install package
          command: apk --update --no-cache add bash git openssh-client jq curl

      - checkout

      - run:
          name: Setup git
          command: |
            git config push.default current
            git config user.name "CircleCI"
            git config user.email ${EMAIL}
      - run:
          name: Elm version up
          command: |
            VERSION=`curl -s https://api.github.com/repos/elm/compiler/tags | jq --raw-output .[0].name`
            echo "Elm version => ${VERSION}"
            count=`curl -sI https://github.com/elm/compiler/releases/download/${VERSION}/binaries-for-linux.tar.gz | grep "Status: 302" | wc -l`
            if [ ${count} == "0" ]; then
              echo "${VERSION} is not released yet"
              exit 0
            fi
            # Edit Dockerfile
            sed -ie "s/ENV ELM_VERSION .*$/ENV ELM_VERSION ${VERSION}/g" Dockerfile
            git add Dockerfile
            set +o pipefail
            git commit -m "update: circleci has updated elm version to ${VERSION}" | true
            git tag -a ${VERSION} -m "Elm ${VERSION}" | true
            set -o pipefail
            git push origin --tags
            git push origin
workflows:
  version: 2

  build:
    jobs:
      - build

  daily_update:
    triggers:
      - schedule:
          # START UTC 21:00(JST 6:00)
          cron: "0 21 * * *"
          filters:
            branches:
              only: master
    jobs:
      - update_version
